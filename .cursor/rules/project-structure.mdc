---
description: 
globs: 
alwaysApply: true
---
# Project Structure Rules for Camply

## Overall Architecture

### Repository Structure

```
Camply/
├── camply-web/          # React frontend application
├── supabase/            # Database migrations and config
├── student_desk/        # AI agent system (separate from web)
├── .cursor/             # Cursor IDE rules and configuration
└── README.md
```

### Frontend Structure (camply-web/)

```
camply-web/
├── public/
│   ├── Departments.json     # Static department/branch data
│   └── Colleges.json        # Legacy college data (deprecated)
├── src/
│   ├── components/          # Global reusable UI components
│   │   ├── ui/             # Shadcn/ui components
│   │   ├── sidebar/        # Global sidebar components (moved from features)
│   │   │   ├── app-sidebar.tsx
│   │   │   ├── components/
│   │   │   │   ├── nav-menu.tsx        # Generic navigation menu
│   │   │   │   ├── nav-user.tsx        # Generic user navigation
│   │   │   │   ├── site-header.tsx     # Generic site header
│   │   │   │   └── ui/                 # Sidebar UI components
│   │   │   ├── hooks/
│   │   │   └── lib/
│   │   ├── forms/          # Global form components
│   │   │   └── AcademicDetailsForm.tsx
│   │   ├── layout/         # Layout components
│   │   └── shared/         # Other shared components
│   │
│   ├── pages/              # Route-level entry points
│   │   ├── Onboarding.tsx
│   │   └── [PageName].tsx
│   │
│   ├── hooks/              # Global custom React hooks
│   │   ├── useUserData.ts
│   │   └── use[HookName].ts
│   │
│   ├── lib/                # Global utilities and configurations
│   │   ├── supabase.ts     # Supabase client setup
│   │   ├── database.ts     # Database operations
│   │   └── [utility].ts
│   │
│   ├── types/              # Global TypeScript type definitions
│   │   ├── database.ts     # Database-related types
│   │   └── [domain].ts
│   │
│   ├── features/           # Feature-specific code
│   │   ├── academic-form/  # Academic form feature
│   │   │   ├── components/
│   │   │   ├── hooks/
│   │   │   └── types/
│   │   │
│   │   └── desk/           # Desk feature (renamed from desk-sidebar)
│   │       ├── components/ # Shared desk components
│   │       │   ├── Layout.tsx
│   │       │   ├── desk-sidebar-wrapper.tsx  # Desk-specific sidebar wrapper
│   │       │   └── shared/
│   │       ├── hooks/      # Shared desk hooks
│   │       │   ├── useCacheService.ts
│   │       │   └── useNavigation.ts
│   │       ├── lib/        # Desk utilities
│   │       │   ├── cacheService.ts
│   │       │   └── constants.ts
│   │       ├── types/      # Desk-specific types
│   │       │   └── index.ts
│   │       │
│   │       └── views/      # Each view gets dedicated ecosystem
│   │           │
│   │           ├── campus/ # Campus Intelligence System
│   │           │   ├── index.tsx                    # Main CampusOverview
│   │           │   ├── components/                  # Campus-specific components
│   │           │   │   ├── CampusHeader.tsx
│   │           │   │   ├── FeatureButton.tsx
│   │           │   │   └── CampusStats.tsx
│   │           │   ├── hooks/                       # Campus-specific hooks
│   │           │   │   ├── useCampusData.ts
│   │           │   │   ├── useCampusCache.ts
│   │           │   │   └── useContextualHelp.ts
│   │           │   ├── lib/                         # Campus utilities
│   │           │   │   ├── campusService.ts
│   │           │   │   ├── markdownRenderer.ts
│   │           │   │   └── socialMediaScraper.ts
│   │           │   ├── types/                       # Campus-specific types
│   │           │   │   ├── campus.ts
│   │           │   │   └── campusContent.ts
│   │           │   │
│   │           │   └── pages/                       # Campus subpages (6+ pages)
│   │           │       ├── news/
│   │           │       │   ├── index.tsx            # Campus news page
│   │           │       │   ├── components/
│   │           │       │   │   ├── NewsCard.tsx
│   │           │       │   │   ├── NewsFilter.tsx
│   │           │       │   │   └── AnnouncementsList.tsx
│   │           │       │   ├── hooks/
│   │           │       │   │   ├── useNewsData.ts
│   │           │       │   │   └── useNewsCache.ts
│   │           │       │   └── types/
│   │           │       │       └── news.ts
│   │           │       │
│   │           │       ├── placements/
│   │           │       │   ├── index.tsx            # Placement analytics
│   │           │       │   ├── components/
│   │           │       │   │   ├── PlacementStats.tsx
│   │           │       │   │   ├── CompanyList.tsx
│   │           │       │   │   └── TrendChart.tsx
│   │           │       │   ├── hooks/
│   │           │       │   │   └── usePlacementData.ts
│   │           │       │   └── types/
│   │           │       │       └── placements.ts
│   │           │       │
│   │           │       ├── achievements/            # Recent achievements
│   │           │       ├── statistics/              # Campus statistics
│   │           │       ├── events/                  # Campus events & fests
│   │           │       └── tour/                    # Virtual campus tour
│   │           │
│   │           ├── academic/ # Academic Intelligence System
│   │           │   ├── index.tsx                    # Main AcademicOverview
│   │           │   ├── components/
│   │           │   │   ├── AcademicTimeline.tsx
│   │           │   │   ├── PerformanceMetrics.tsx
│   │           │   │   ├── HandbookQuery.tsx
│   │           │   │   └── InsightAnalytics.tsx
│   │           │   ├── hooks/
│   │           │   │   ├── useAcademicData.ts
│   │           │   │   ├── useHandbookSystem.ts
│   │           │   │   ├── usePerformanceAnalysis.ts
│   │           │   │   └── useCareerAnalysis.ts
│   │           │   ├── lib/
│   │           │   │   ├── handbookParser.ts
│   │           │   │   ├── performanceCalculator.ts
│   │           │   │   └── insightGenerator.ts
│   │           │   ├── types/
│   │           │   │   ├── academic.ts
│   │           │   │   ├── handbook.ts
│   │           │   │   └── performance.ts
│   │           │   │
│   │           │   └── pages/                       # Academic subpages
│   │           │       ├── timeline/                # Academic timeline
│   │           │       ├── performance/             # Performance metrics
│   │           │       ├── career-analysis/         # Career path analysis
│   │           │       ├── handbook-query/          # Rulebook questions
│   │           │       ├── semester-insights/       # Semester analysis
│   │           │       └── break-recommendations/   # Semester break activities
│   │           │
│   │           ├── courses/ # Advanced Course Management
│   │           │   ├── index.tsx                    # Main Courses view
│   │           │   ├── components/
│   │           │   │   ├── CourseCard.tsx
│   │           │   │   ├── UnitProgress.tsx
│   │           │   │   ├── TopicManager.tsx
│   │           │   │   ├── StudySession.tsx
│   │           │   │   ├── NoteEditor.tsx
│   │           │   │   └── AssignmentTracker.tsx
│   │           │   ├── hooks/
│   │           │   │   ├── useCourseData.ts
│   │           │   │   ├── useUnitProgress.ts
│   │           │   │   ├── useStudySession.ts
│   │           │   │   ├── useNoteManager.ts
│   │           │   │   └── useAssignmentTracker.ts
│   │           │   ├── lib/
│   │           │   │   ├── studyPlanGenerator.ts
│   │           │   │   ├── progressCalculator.ts
│   │           │   │   ├── noteSerializer.ts
│   │           │   │   └── unitFlowchartGenerator.ts
│   │           │   ├── types/
│   │           │   │   ├── course.ts
│   │           │   │   ├── unit.ts
│   │           │   │   ├── study.ts
│   │           │   │   └── assignment.ts
│   │           │   │
│   │           │   └── pages/                       # Course subpages
│   │           │       ├── course-detail/           # Individual course pages
│   │           │       │   ├── [courseId]/
│   │           │       │   │   ├── index.tsx        # Course overview
│   │           │       │   │   ├── units/           # Unit-by-unit study
│   │           │       │   │   │   ├── [unitId]/
│   │           │       │   │   │   │   ├── index.tsx
│   │           │       │   │   │   │   ├── topics/
│   │           │       │   │   │   │   └── progress/
│   │           │       │   │   ├── study-ia1/       # IA-1 preparation
│   │           │       │   │   ├── study-ia2/       # IA-2 preparation
│   │           │       │   │   ├── study-sem/       # Semester end prep
│   │           │       │   │   ├── assignments/     # Assignment management
│   │           │       │   │   └── notes/           # Saved notes
│   │           │       │   └── components/
│   │           │       ├── current-semester/        # Current semester courses
│   │           │       ├── course-flowchart/        # Course interconnections
│   │           │       └── study-schedule/          # AI-optimized schedule
│   │           │
│   │           └── current-semester/ # Semester Management Hub
│   │               ├── index.tsx                    # Main CurrentSemester view
│   │               ├── components/
│   │               │   ├── SemesterTimeline.tsx
│   │               │   ├── CourseGrid.tsx
│   │               │   ├── ScoreTracker.tsx
│   │               │   ├── PerformanceAnalyzer.tsx
│   │               │   └── ImprovementSuggestions.tsx
│   │               ├── hooks/
│   │               │   ├── useSemesterData.ts
│   │               │   ├── useScoreAnalysis.ts
│   │               │   ├── usePerformanceTracking.ts
│   │               │   └── useImprovementPlan.ts
│   │               ├── lib/
│   │               │   ├── scoreAnalyzer.ts
│   │               │   ├── performancePredictor.ts
│   │               │   └── improvementEngine.ts
│   │               ├── types/
│   │               │   ├── semester.ts
│   │               │   ├── scores.ts
│   │               │   └── analysis.ts
│   │               │
│   │               └── pages/                       # Semester subpages
│   │                   ├── schedule/                # Semester schedule
│   │                   ├── exams/                   # Exam management
│   │                   ├── attendance/              # Attendance tracking
│   │                   ├── performance/             # Performance analysis
│   │                   ├── ia-analysis/             # IA score analysis
│   │                   └── optimization/            # Semester-end optimization
│   │
│   └── assets/             # Static assets
├── package.json
├── tsconfig.json
├── tailwind.config.js
└── vite.config.ts
```

### Database Structure (supabase/)

```
supabase/
├── migrations/
│   ├── 20240325_create_tables.sql           # Initial schema
│   ├── 20250607155204_add_colleges_table_and_update_schema.sql
│   ├── 20250607155746_insert_sample_colleges_data.sql
│   ├── 20250607160000_add_phone_unique_constraint.sql
│   └── [YYYYMMDD_HHMMSS_description].sql
├── config.toml
└── .gitignore
```

## File Naming Conventions

### React Components

- **Components**: PascalCase - `AcademicDetailsForm.tsx`
- **Pages**: PascalCase - `Onboarding.tsx`
- **Hooks**: camelCase starting with 'use' - `useUserData.ts`
- **Utilities**: camelCase - `database.ts`, `supabase.ts`
- **Types**: camelCase - `database.ts`

### Database Files

- **Migrations**: `YYYYMMDD_HHMMSS_descriptive_name.sql`
- **Config**: lowercase with dots - `config.toml`

### Static Assets

- **JSON Data**: PascalCase - `Departments.json`, `Colleges.json`
- **Images**: kebab-case - `app-logo.png`

## Component Organization Rules

### Component Hierarchy

1. **Global Components** (`src/components/`): Used across multiple features
   - UI components, shared forms, layout components
   - Sidebar components (moved from features for reusability)

2. **Feature Components** (`src/features/[feature]/components/`): Feature-specific shared components
   - Used by multiple views within the same feature

3. **View Components** (`src/features/[feature]/views/[view]/components/`): View-specific components
   - Only used within that specific view

4. **Page Components** (`src/features/[feature]/views/[view]/pages/[page]/components/`): Page-specific components
   - Used only within that specific page

### Component File Structure

```typescript
// 1. Imports (in order)
import { useState, useEffect } from "react";
import type { ComponentProps } from "../types/database";
import { supabase } from "../lib/supabase";

// 2. Interface definitions
interface ComponentProps {
  // Props definition
}

// 3. Main component
const ComponentName = ({ props }: ComponentProps) => {
  // State declarations
  // Effect hooks
  // Event handlers
  // Helper functions
  // Render return
};

// 4. Sub-components (if any)
const SubComponent = () => {};

// 5. Default export
export default ComponentName;
```

### View Organization Rules

Each view in `features/desk/views/` follows this pattern:

```
view-name/
├── index.tsx           # Main view component
├── components/         # View-specific components
├── hooks/             # View-specific hooks
├── lib/               # View-specific utilities
├── types/             # View-specific types
└── pages/             # Subpages for the view
    ├── page-name/
    │   ├── index.tsx   # Main page component
    │   ├── components/ # Page-specific components
    │   ├── hooks/      # Page-specific hooks
    │   └── types/      # Page-specific types
    └── other-page/
```

### Page Component Structure

- Pages should be thin wrappers around components
- Handle routing logic and data fetching at page level
- Pass data down to presentational components
- Subpages can have their own components, hooks, and types for complex functionality

### Desk Feature Architecture

The desk feature follows a multi-level hierarchy designed for scalability:

#### 1. Sidebar Architecture
- **Global Sidebar** (`components/sidebar/`): Generic, reusable sidebar components
- **Desk Wrapper** (`features/desk/components/desk-sidebar-wrapper.tsx`): Feature-specific wrapper that provides data to generic sidebar

#### 2. View Structure
Each view supports complex functionality with dedicated subpages:

- **Campus View**: AI-powered campus intelligence with 6+ subpages (news, placements, achievements, statistics, events, tour)
- **Academic View**: Personal academic management with timeline, performance, handbook queries, and career analysis
- **Courses View**: Advanced course management with unit-based learning, study preparation, and assignment tracking
- **Current Semester View**: Semester management with schedule, exams, attendance, and performance optimization

#### 3. Import Patterns

```typescript
// Global components (from any feature)
import { AppSidebar } from '@/components/sidebar/app-sidebar'
import { NavMenu } from '@/components/sidebar/components/nav-menu'

// Feature-specific (within desk feature)
import { DeskSidebarWrapper } from '../components/desk-sidebar-wrapper'
import { Layout } from '../components/Layout'

// View-specific (within same view)
import { CampusHeader } from './components/CampusHeader'
import { useCampusData } from './hooks/useCampusData'

// Page-specific (within same page)
import { NewsCard } from './components/NewsCard'
import { useNewsData } from './hooks/useNewsData'
```

#### 4. Export Patterns

```typescript
// Feature index exports
export { Layout } from "./components/Layout"
export { DeskSidebarWrapper, DeskSiteHeader } from "./components/desk-sidebar-wrapper"

// View index exports
export { CampusOverview } from "./views/campus"
export { AcademicOverview } from "./views/academic"

// Page index exports (for subpages)
export { CampusNews } from "./pages/news"
export { PlacementAnalytics } from "./pages/placements"
```

## Database Schema Organization

### Table Relationships

```
Auth Users (Supabase Auth)
    ↓
Users Table (user_id, name, email, phone_number, academic_id)
    ↓
User Academic Details (academic_id, college_id, department, branch, etc.)
    ↓
Semesters (semester_id, academic_id, semester_number)
    ↓
Courses (course_id, semester_id, course_name)

Colleges (college_id, name, city, state, university_name)
    ↑
Referenced by User Academic Details
```

### Migration Organization

- One migration per logical change
- Include rollback information in comments
- Always test migrations locally before pushing
- Use descriptive names for migration files

## API Layer Organization

### Database Operations (lib/database.ts)

```typescript
// User-related operations
export const checkUserStatus = async (userId: string): Promise<UserStatus> => {};
export const createUserWithAcademicDetails = async (...): Promise<...> => {};
export const updateUserAcademicDetails = async (...): Promise<...> => {};

// Academic-related operations
export const getAcademicDetails = async (userId: string): Promise<...> => {};
export const updateAcademicDetails = async (...): Promise<...> => {};

// College-related operations
export const getColleges = async (): Promise<College[]> => {};
export const getCollegeById = async (id: string): Promise<College> => {};
```

### Supabase Client (lib/supabase.ts)

```typescript
// Client setup
export const supabase = createClient(url, key);

// Auth helpers
export const signInWithGoogle = async () => {};
export const signOut = async () => {};
```

## Type Organization

### Database Types (types/database.ts)

```typescript
// Core entity interfaces
export interface User {}
export interface College {}
export interface UserAcademicDetails {}

// Form and UI types
export interface UserFormData {}
export interface UserStatus {}

// Utility types
export interface DepartmentData {}
```

### Domain-specific Types

- Create separate type files for different domains
- Import only what's needed in each component
- Use generic types where appropriate

## Configuration Management

### Environment Variables

```typescript
// Required environment variables
VITE_SUPABASE_URL = your - supabase - url;
VITE_SUPABASE_ANON_KEY = your - supabase - anon - key;
```

### Build Configuration

- Vite for development and build
- Tailwind CSS for styling
- TypeScript for type safety
- ESLint and Prettier for code quality

## Testing Structure

### Test File Organization

```
src/
├── components/
│   ├── AcademicDetailsForm.tsx
│   └── AcademicDetailsForm.test.tsx
├── hooks/
│   ├── useUserData.ts
│   └── useUserData.test.ts
└── lib/
    ├── database.ts
    └── database.test.ts
```

### Test Naming

- Test files: `[ComponentName].test.tsx`
- Test descriptions: Use descriptive strings
- Test organization: Group by functionality

## Documentation Standards

### Code Comments

```typescript
/**
 * Creates a new user with academic details in the database
 * @param userId - UUID of the authenticated user
 * @param email - User's email address
 * @param formData - Academic form data
 * @returns Promise resolving to user and academic details
 * @throws Error if creation fails or validation errors occur
 */
export const createUserWithAcademicDetails = async (
  userId: string,
  email: string,
  formData: UserFormData
): Promise<{ user: User; academicDetails: UserAcademicDetails }> => {
  // Implementation
};
```

### README Structure

- Project overview
- Setup instructions
- Database schema overview
- Development guidelines
- Deployment instructions

## Security Considerations

### Environment Security

- Never commit sensitive keys
- Use environment variables for configuration
- Implement proper RLS policies

### Code Security

- Validate all user inputs
- Use TypeScript for type safety
- Implement proper error handling
- Follow principle of least privilege

## Performance Guidelines

### Bundle Optimization

- Use dynamic imports for route splitting
- Lazy load heavy components
- Optimize image assets
- Use proper caching strategies

### Database Performance

- Use appropriate indexes
- Implement efficient queries
- Use RLS for security and performance
- Monitor query performance

## Deployment Structure

### Staging Environment

- Separate Supabase project for staging
- Environment-specific configurations
- Automated testing before production

### Production Environment

- Production Supabase project
- CDN for static assets
- Monitoring and logging
- Backup strategies

## Version Control Guidelines

### Branch Strategy

```
main          # Production-ready code
develop       # Integration branch
feature/*     # Feature branches
hotfix/*      # Critical fixes
```

### Commit Messages

- Use conventional commits format
- Include scope when relevant
- Be descriptive and concise

### PR Guidelines

- Include description of changes
- Reference related issues
- Ensure tests pass
- Update documentation as needed
