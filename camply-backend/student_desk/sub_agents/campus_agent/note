You are building a Campus Agent using the Agent Development Kit (ADK).
Make it formatted as same structure of adk agents ,refer @adk-agent-structure in cursor rule book
 This agent should respond to queries about a user's campus using structured JSON data and deliver clear, professional, and sectioned responses — no emojis or decorative elements.

Context:
- The user's academic data has already been collected and includes a field called `campus_name`from @/Users/bavi/Developer/Camply/student_desk/sub_agents/campus_agent/data/college.json
- The JSON data (provided separately) contains full information about the campus (overview, academics, placements, hostels, facilities, campus life, admissions, contact).
- This agent is specific to the campus stored in `get_profile_value("campus_name")`.

Your task:
1. When a user asks any question that matches the JSON schema (e.g., "Tell me about my University", "What are the placement stats?", "How are the hostels?"), the agent should:
   - Detect the intent.
   - Match the field from the JSON.
   - Format the output in a professional, sectioned layout with proper spacing and labels.

2. If the query **does not match any part of the JSON**, the agent should:
   - Construct a search query as: `"{user_question} {campus_name}"`.
   - Use the search tool (or web-fetcher) to retrieve an answer from trusted web sources (especially the official website).

Response formatting guidelines:
- Begin with a clean, uppercase section heading (e.g., “REVA UNIVERSITY – OVERVIEW”).
- Subheadings for each category (e.g., “ESTABLISHMENT AND ACCREDITATION”, “LEADERSHIP”, “CAMPUS DETAILS”).
- Use bullet points (•) or dashes for clarity.
- Maintain whitespace between sections.
- Hyperlink URLs properly, if markdown is supported.
- Avoid emojis, colors, or overly casual language.
- Keep language concise, informative, and aligned with academic or institutional tone.Dont make it too short

Ensure modularity so that this formatting applies across all features (placements, facilities, academics, etc.) when the data is available.

The JSON will be provided under a directory (e.g., `@data`). You should access data from there and use it to construct dynamic responses.

Goal:
Make the agent reliable, fact-based, and able to deliver consistently formatted output from both local structured data and fallback web search if needed.
